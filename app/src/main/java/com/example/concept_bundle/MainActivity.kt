package com.example.concept_bundle

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.TaskStackBuilder
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.ImageView
import android.widget.Spinner
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.annotation.RequiresApi
import androidx.appcompat.app.ActionBarDrawerToggle
import androidx.appcompat.app.AlertDialog
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.drawerlayout.widget.DrawerLayout
import com.google.android.material.navigation.NavigationView

class MainActivity : AppCompatActivity() {
    val CHANNEL_ID = "1"
    val CHANNEL_NAME = "Concept Bundle notifier"
    val NOTIFICATION_ID = 0
    lateinit var toggle : ActionBarDrawerToggle
    lateinit var AirplanceModeReceiver : AirplanceModeEnabledRecevier

    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        createNotificationChannel()
        AirplanceModeReceiver = AirplanceModeEnabledRecevier()
        IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED).also {
            registerReceiver(AirplanceModeReceiver,it)
        }

        val intentofMain = Intent(this, MainActivity::class.java)
        val pendingIntent = TaskStackBuilder.create(this).run {
            addNextIntentWithParentStack(intentofMain)
            getPendingIntent(0,PendingIntent.FLAG_IMMUTABLE)
        }

        val notification = NotificationCompat.Builder(this,CHANNEL_ID)
            .setContentTitle("New push notification")
            .setContentText("This a new push notification generated by concept bundle app")
            .setSmallIcon(R.drawable.ic_alert)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .build()

        val notification_manager = NotificationManagerCompat.from(this)
        val pushbtn = findViewById<Button>(R.id.btnPush)

        pushbtn.setOnClickListener {
            var pending_permissions = mutableListOf<String>()
            if (ActivityCompat.checkSelfPermission(
                    this,
                    Manifest.permission.POST_NOTIFICATIONS
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                pending_permissions.add(Manifest.permission.POST_NOTIFICATIONS)
            }
            if(pending_permissions.size > 0){
                ActivityCompat.requestPermissions(this,pending_permissions.toTypedArray(),0)
            }
            notification_manager.notify(NOTIFICATION_ID,notification)
        }



        val drawerLayout = findViewById<DrawerLayout>(R.id.drawerLayout)
        toggle = ActionBarDrawerToggle(this,drawerLayout,R.string.open,R.string.close)
        drawerLayout.addDrawerListener(toggle)
        toggle.syncState()

        supportActionBar?.show()
        supportActionBar?.setDisplayShowTitleEnabled(true)

        val navView = findViewById<NavigationView>(R.id.nav_view)
        navView.setNavigationItemSelectedListener {
            when(it.itemId){
                R.id.mi_nav_menu_bot_nav -> btnBottomNavClicked()
                R.id.mi_nav_menu_fragments -> btnFragmentClicked()
                R.id.mi_nav_menu_notes -> btnNotesClicked()
                R.id.mi_nav_menu_view_pager -> btnViewPagerClicked()
                R.id.mi_nav_menu_service -> btnServiceClicked()
                R.id.mi_nav_menu_Drag -> btnDragDropClicked()
            }
            true
        }

        supportActionBar?.setDisplayHomeAsUpEnabled(true)

        val setimage = findViewById<Button>(R.id.btnImage)
        val image = findViewById<ImageView>(R.id.ivPhoto)

        val result = registerForActivityResult(ActivityResultContracts.StartActivityForResult()){
            image.setImageURI(it?.data?.data)
        }
        val intent = Intent(Intent.ACTION_GET_CONTENT)

        val options = arrayOf("png","jpeg","bmp","svg","All")
        var selected : Int = 0

        val imgType = AlertDialog.Builder(this)
            .setTitle("Which type of image do you wanna select")
            .setIcon(R.drawable.ic_question)
            .setSingleChoiceItems(options,4){_, index ->
                selected = index
            }
            .setPositiveButton("Ok"){ _, _ -> result.launch(intent)}
            .setNegativeButton("Cancel"){_,_ -> }
            .create()

        setimage.setOnClickListener{
            imgType.show()
            if(selected == 4) {
                intent.setType("image/*")
            }
            else {
                intent.setType("image/${options[selected]}")
            }
            Toast.makeText(this,"${options[selected]} is selected",Toast.LENGTH_SHORT).show()

        }

        val alert = AlertDialog.Builder(this)
            .setTitle("Attention")
            .setIcon(R.drawable.ic_question)
            .setMessage("Are you sure you want to close")
            .setPositiveButton("Yes"){ _,_ ->
                Toast.makeText(this,"Changes were discarded",Toast.LENGTH_SHORT).show()
            }
            .setNegativeButton("No"){_,_ ->
                Toast.makeText(this,"Nothing changed",Toast.LENGTH_SHORT).show()
            }.create()


        val dismiss = findViewById<Button>(R.id.btnDismiss)
        dismiss.setOnClickListener{
            alert.show()
        }

        val multiple_options = arrayOf("First","Second","Third","Fourth")
        val testmultiple = AlertDialog.Builder(this)
            .setTitle("This is multiple check box")
            .setMultiChoiceItems(multiple_options, booleanArrayOf(true,false,false,false)){ _, index, ischecked ->
                if(ischecked){
                    Toast.makeText(this,"You selected ${multiple_options[index]}",Toast.LENGTH_SHORT).show()
                }
            }
            .setPositiveButton("Yes"){_,_ ->}
            .setNegativeButton("No"){_,_ ->
                Toast.makeText(this,"Multi choise option is closed",Toast.LENGTH_SHORT).show()
            }

        val multiple = findViewById<Button>(R.id.btnMultiple)
        multiple.setOnClickListener{
            testmultiple.show()
        }


        val spData = findViewById<Spinner>(R.id.spData)
        val adapter = ArrayAdapter<String>(this, com.google.android.material.R.layout.support_simple_spinner_dropdown_item,
            listOf<String>("Jefi","Jenny","Ryan","Pearlin","Christy","Kanaga","Latha")
        )
        spData.adapter = adapter
        spData.onItemSelectedListener = object : AdapterView.OnItemSelectedListener{
            override fun onItemSelected(adapterview: AdapterView<*>?, view: View?, selectedItem: Int, id: Long) {
                Toast.makeText(this@MainActivity,"You selected ${adapterview?.getItemAtPosition(selectedItem)}",Toast.LENGTH_SHORT).show()
            }

            override fun onNothingSelected(parent: AdapterView<*>?) {
                TODO("Not yet implemented")
            }
        }

    }

    fun createNotificationChannel(){
        val notification_channel = NotificationChannel(CHANNEL_ID,CHANNEL_NAME,NotificationManager.IMPORTANCE_HIGH)
        val notification_manager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
        notification_manager.createNotificationChannel(notification_channel)
    }

    private fun btnBottomNavClicked(){
        Intent(this, BottomNavigationActivity :: class.java).also{
            startActivity(it)
        }
    }

    private fun btnViewPagerClicked(){
        Intent(this, ViewPagerActivity :: class.java).also {
            startActivity(it)
        }
    }

    private fun btnFragmentClicked(){
        Intent(this, FragmentsActivity :: class.java).also {
            startActivity(it)
        }
    }


    private fun btnNotesClicked(){
        Intent(this,NotesActivity :: class.java).also {
            startActivity(it)
        }
    }

    private fun btnServiceClicked(){
        Intent(this,ServiceActivity :: class.java).also {
            startActivity(it)
        }
    }

    private fun btnDragDropClicked(){
        Intent(this,DragDropActivity :: class.java).also {
            startActivity(it)
        }
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.toolbar_menu, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        if(toggle.onOptionsItemSelected(item)){
            return true
        }
        when(item.title){
            "App info" -> Toast.makeText(this,"App info is pressed", Toast.LENGTH_SHORT).show()
            "Give Feedback" -> Toast.makeText(this,"Give Feedback is pressed", Toast.LENGTH_SHORT).show()
            "About" -> Toast.makeText(this,"About is pressed", Toast.LENGTH_SHORT).show()
        }
        return true
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        for(i in grantResults.indices){
            if(grantResults[i] == PackageManager.PERMISSION_GRANTED){
                Log.d("MainActivity","${permissions[i]} granted")
            } else {
              Log.d("MainActivity","${permissions[i]} not granted")
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiver(AirplanceModeReceiver)
    }

}